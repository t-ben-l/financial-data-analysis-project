# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17wrSgxeN-p2yunlwatBXbdzk02pC3au4
"""

import math 

import numpy as np 
import pandas as pd 
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt

plt.style.use('fivethirtyeight')

#df = web.DataReader('USDJPY',data_source='google',start = '2012-01-01', end = '2019-12-17')
#df = web.DataReader(('EURPLN'), 'fred')

#load data

df = pd.read_csv('USDTRY.csv')

df

df.shape

#closing price history 
plt.figure(figsize=(16,8))
plt.title('close price history')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize = 18)
plt.ylabel('Close orise USD ($)' , fontsize = 18)
plt.show()

# make dataframe with the close column only 
data = df.filter(['Close'])
#convert datafarme to numpy  array 

dataset = data.values

training_data_len = math.ceil(len(dataset) *.8)

training_data_len

scaler  = MinMaxScaler (feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#create training dataset 
#Create the scaled training 

train_data = scaled_data[0:training_data_len, :]

x_train = []
y_train = []

for i in range (60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append (train_data[i,0])
  if i<= 60:
    print(x_train)
    print(y_train)
    print()

#convert  x and y train to numpy 

x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape (x_train, (x_train.shape[0], x_train.shape[1], 1))

x_train.shape

#build the LSTM model 
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1],1) ))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compiling the model
model.compile(optimizer = 'adam', loss='mean_squared_error')

#training the model
model.fit (x_train,y_train,batch_size = 1,epochs=1)

#create testing dataset 
#

test_data = scaled_data[training_data_len - 60: , :]
#create data sets x and y test

x_test = []
y_test  = dataset [training_data_len: , :]
for i in range (60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#convert dat to a numpy array 

x_test = np.array (x_test)
x_test.shape

#reshape data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))

x_test.shape

#Get predicted values

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get the root mean squared error 
rmse = np.sqrt (np.mean(predictions - y_test) **2)
rmse

train = data [:training_data_len]
valid = data[training_data_len:]
valid ['Predictions'] = predictions
#visual presentation 
plt.figure (figsize=(16,8))
plt.xlabel ('Date', fontsize = 18)
plt.title('Model')
plt.xlabel('Date',fontsize = 18)
plt.ylabel('Close price ', fontsize= 18)

plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train','Val', 'Predictions'], loc = "lower right")
plt.show()

valid